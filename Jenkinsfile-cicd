pipeline {
    environment {
        PRJ="hello-${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
        APP='nodeapp'
    }
    agent {
      node {
        label 'nodejs'
      }
    }
    stages {
        stage('create') {
            steps {
                script {
                    openshift.verbose()
                    openshift.logLevel(0)
                    openshift.withCluster() {
                        openshift.newProject("${env.PRJ}")
                        openshift.withProject("${env.PRJ}") {
                            openshift.newApp('https://github.com/flozanorht/node-cicd.git', "--name ${env.APP}")
                        }
                    }
                }
            }
        }
        stage('build') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("${env.PRJ}") {
                            def bc = openshift.selector('bc', "${env.APP}")
                            def builds = bc.related('builds').untilEach(1) {
                                return (it.object().status.phase == "Complete")
                            }
                        }
                    }
                }
            }
        }
        stage('deploy') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("${env.PRJ}") {
                            openshift.selector('dc', "${env.APP}").rollout().status()
                            openshift.selector('dc', "${env.APP}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
            }
        }
        stage('test') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("${env.PRJ}") {
                            def host = openshift.selector('route', "${env.APP}").object.host
                            sh("curl --fail ${host}")
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                openshift.withCluster() {
                    openshift.delete("project/${env.PRJ}")
                }
            }
        }
    }
}
